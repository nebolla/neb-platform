generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  PARTNER
  ADMIN
  SUPER_ADMIN
}

enum PurchaseStatus {
  PENDING
  APPROVED
  REJECTED
}

enum Chain {
  TRC20
  BEP20
}

enum LedgerType {
  CREDIT
  DEBIT
}

model User {
  id           String   @id @default(cuid())
  partnerId    String   @unique
  email        String   @unique
  name         String?
  passwordHash String
  role         Role     @default(PARTNER)
  referralCode String   @unique
  referrerId   String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  wallets      Wallet[]
  purchases    Purchase[]
  withdrawals  Withdrawal[]
}

model Wallet {
  id      String  @id @default(cuid())
  userId  String
  user    User    @relation(fields:[userId], references:[id])
  type    String  // NEB | INCOME
  balance Decimal @db.Decimal(38,2) @default(0)
  ledgers WalletLedger[]
  @@unique([userId, type])
}

model WalletLedger {
  id        String   @id @default(cuid())
  walletId  String
  wallet    Wallet   @relation(fields:[walletId], references:[id])
  type      LedgerType
  event     String
  amount    Decimal  @db.Decimal(38,2)
  meta      Json?
  createdAt DateTime @default(now())
}

model Purchase {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields:[userId], references:[id])
  amountUsd  Decimal  @db.Decimal(38,2)
  chain      Chain
  proofUrl   String
  txHash     String?
  status     PurchaseStatus @default(PENDING)
  reviewedBy String?
  reviewedAt DateTime?
  createdAt  DateTime @default(now())
}

model Withdrawal {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields:[userId], references:[id])
  amountReq   Decimal  @db.Decimal(38,2)
  feePercent  Decimal  @db.Decimal(5,2) @default(5.00)
  feeAmount   Decimal  @db.Decimal(38,2) @default(0)
  amountPaid  Decimal  @db.Decimal(38,2) @default(0)
  chain       Chain
  toAddress   String
  status      String   @default("PENDING")
  processedBy String?
  processedAt DateTime?
  createdAt   DateTime @default(now())
}

model PoolAccount {
  id      String  @id @default(cuid())
  name    String  @unique   // VIP | ELITE | WITHDRAWAL_FEE
  balance Decimal @db.Decimal(38,2) @default(0)
  ledgers PoolLedger[]
}

model PoolLedger {
  id        String   @id @default(cuid())
  poolId    String
  pool      PoolAccount @relation(fields:[poolId], references:[id])
  event     String   // ACCRUAL | DISTRIBUTION | FEE
  amount    Decimal  @db.Decimal(38,2)
  meta      Json?
  createdAt DateTime @default(now())
}

model EventOutbox {
  id        String   @id @default(cuid())
  type      String
  payload   Json
  status    String   @default("PENDING")
  retries   Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Setting {
  key String @id
  val String
}
